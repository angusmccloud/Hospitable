AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Hospitable tools - ingestion to DynamoDB

Parameters:
  StageName:
    Type: String
    Default: v1
  ApiBase:
    Type: String
    Default: https://public.api.hospitable.com
  HospitableTokenParam:
    Type: String
    Default: /hospitable/tools/token
  WebhookSecretParam:
    Type: String
    Default: /hospitable/webhook/secret

  # Use an EXISTING Cognito Hosted UI domain; this stack will not create one.
  ExistingHostedDomain:
    Type: String
    Default: "https://hospitable.auth.us-east-1.amazoncognito.com"
    Description: "Full Hosted UI domain, e.g. https://<prefix>.auth.us-east-1.amazoncognito.com"

  # Chrome Extension ID to compose callback/logout redirect URIs
  ExtensionId:
    Type: String
    Default: ""
    Description: "Chrome extension ID; if set, callback/logout URLs are chrome-extension://<id>/..."

  # Token lifetime config
  RefreshTokenDays:
    Type: Number
    Default: 365
    Description: "Refresh token lifetime in days (e.g., 365 â‰ˆ 1 year)"

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 60
    MemorySize: 512
    Environment:
      Variables:
        TABLE_NAME: !Ref HospitableTable
        HOSPITABLE_API_BASE: !Ref ApiBase
        HOSPITABLE_TOKEN_PARAM: !Ref HospitableTokenParam

Conditions:
  HasExtensionId: !Not [ !Equals [ !Ref ExtensionId, "" ] ]

Resources:
  # -----------------------
  # Core Data Store
  # -----------------------
  HospitableTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: HospitableData
      BillingMode: PAY_PER_REQUEST
      SSESpecification: { SSEEnabled: true }
      PointInTimeRecoverySpecification: { PointInTimeRecoveryEnabled: true }
      AttributeDefinitions:
        - { AttributeName: pk, AttributeType: S }
        - { AttributeName: sk, AttributeType: S }
      KeySchema:
        - { AttributeName: pk, KeyType: HASH }
        - { AttributeName: sk, KeyType: RANGE }

  # -----------------------
  # Cognito (Pool + Client)
  # -----------------------
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: hospitable-user-pool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes: [ email ]
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: hospitable-user-pool-client
      GenerateSecret: false

      # OAuth / Hosted UI
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: [ code ]
      AllowedOAuthScopes: [ openid, email, phone, profile ]
      SupportedIdentityProviders: [ COGNITO ]

      # Build redirect URIs from the extension ID when provided
      CallbackURLs:
        - !If
          - HasExtensionId
          - !Sub "chrome-extension://${ExtensionId}/callback"
          - !Ref "AWS::NoValue"
      LogoutURLs:
        - !If
          - HasExtensionId
          - !Sub "chrome-extension://${ExtensionId}/logout"
          - !Ref "AWS::NoValue"

      # Token lifetimes
      AccessTokenValidity: 60        # minutes
      IdTokenValidity: 60            # minutes
      RefreshTokenValidity: !Ref RefreshTokenDays
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days

      EnableTokenRevocation: true
      PreventUserExistenceErrors: ENABLED

  # -----------------------
  # APIs (guests & reservations)
  # -----------------------
  GuestsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'GET,OPTIONS'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  ReservationsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'GET,OPTIONS'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  WebhookApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'POST,OPTIONS'"

  # -----------------------
  # Guest endpoints
  # -----------------------
  GetGuestByConversationIdFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/guests/getByConversationId.handler
      Runtime: nodejs20.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref HospitableTable
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:BatchGetItem
              Resource: !GetAtt HospitableTable.Arn
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Events:
        GuestByConversationId:
          Type: Api
          Properties:
            RestApiId: !Ref GuestsApi
            Path: /guests/by-conversation/{conversationId}
            Method: GET

  GetGuestsFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/guests/getAll.handler
      Runtime: nodejs20.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref HospitableTable
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Scan
                - dynamodb:Query
                - dynamodb:BatchGetItem
              Resource: !GetAtt HospitableTable.Arn
      Events:
        Guests:
          Type: Api
          Properties:
            RestApiId: !Ref GuestsApi
            Path: /guests
            Method: GET

  GetGuestByIdFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/guests/getById.handler
      Runtime: nodejs20.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref HospitableTable
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:BatchGetItem
              Resource: !GetAtt HospitableTable.Arn
      Events:
        GuestById:
          Type: Api
          Properties:
            RestApiId: !Ref GuestsApi
            Path: /guests/{guestId}
            Method: GET

  UpdateGuestHostNotesFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/guests/updateHostNotes.handler
      Runtime: nodejs20.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref HospitableTable
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:BatchGetItem
              Resource: !GetAtt HospitableTable.Arn
      Events:
        UpdateHostNotes:
          Type: Api
          Properties:
            RestApiId: !Ref GuestsApi
            Path: /guests/{guestId}/hostNotes
            Method: PUT

  # -----------------------
  # Reservation endpoints
  # -----------------------
  GetReservationsFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/reservations/getAll.handler
      Runtime: nodejs20.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref HospitableTable
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Scan
                - dynamodb:Query
                - dynamodb:BatchGetItem
              Resource: !GetAtt HospitableTable.Arn
      Events:
        Reservations:
          Type: Api
          Properties:
            RestApiId: !Ref ReservationsApi
            Path: /reservations
            Method: GET

  GetReservationByIdFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/reservations/getById.handler
      Runtime: nodejs20.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref HospitableTable
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Scan
                - dynamodb:Query
                - dynamodb:BatchGetItem
              Resource: !GetAtt HospitableTable.Arn
      Events:
        ReservationById:
          Type: Api
          Properties:
            RestApiId: !Ref ReservationsApi
            Path: /reservations/{reservationId}
            Method: GET

  SyncPropertiesFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/ingest/syncProperties.handler
      Description: Fetch properties from Hospitable and upsert into DynamoDB
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref HospitableTable
        - Statement:
            - Effect: Allow
              Action: ssm:GetParameter
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${HospitableTokenParam}

  SyncReservationsFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/ingest/syncReservations.handler
      Description: Fetch reservations for one or more properties and upsert into DynamoDB
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref HospitableTable
        - Statement:
            - Effect: Allow
              Action: ssm:GetParameter
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${HospitableTokenParam}

  # -----------------------
  # Webhooks (SQS pipeline)
  # -----------------------
  IngestQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: hospitable-webhook-dlq
      MessageRetentionPeriod: 1209600 # 14 days

  IngestQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: hospitable-webhook-queue
      VisibilityTimeout: 120
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt IngestQueueDLQ.Arn
        maxReceiveCount: 5

  WebhookReceiverFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/webhook/receiver.handler
      Description: Verify signature + ack; enqueue payload
      Environment:
        Variables:
          TABLE_NAME: !Ref HospitableTable
          GUEST_LINK_QUEUE_URL: !Ref GuestLinkQueue
          QUEUE_URL: !Ref IngestQueue
          WEBHOOK_SECRET_PARAM: !Ref WebhookSecretParam
      Policies:
        - AWSLambdaBasicExecutionRole
        - SQSSendMessagePolicy:
            QueueName: !GetAtt IngestQueue.QueueName
        - Statement:
            - Effect: Allow
              Action: ssm:GetParameter
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${WebhookSecretParam}
      Events:
        PostRoute:
          Type: Api
          Properties:
            RestApiId: !Ref WebhookApi
            Path: /webhooks/hospitable
            Method: POST

  WebhookProcessorFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/webhook/processor.handler
      Description: Validate + upsert reservations/properties into DynamoDB and enqueue guest link jobs
      Environment:
        Variables:
          TABLE_NAME: !Ref HospitableTable
          GUEST_LINK_QUEUE_URL: !Ref GuestLinkQueue
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref HospitableTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt GuestLinkQueue.QueueName
      Events:
        FromQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt IngestQueue.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 5
            FunctionResponseTypes: [ReportBatchItemFailures]

  # -----------------------
  # Guest linking worker + backfill
  # -----------------------
  GuestLinkQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: guest-link-queue
      VisibilityTimeout: 60
      MessageRetentionPeriod: 1209600 # 14 days

  GuestLinkQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: guest-link-queue-dlq
      MessageRetentionPeriod: 1209600

  GuestLinkerFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/guest/linkerWorker.handler
      Description: Consumes GuestLinkQueue and links reservations to guests
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref HospitableTable
      Events:
        FromQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt GuestLinkQueue.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 5
            FunctionResponseTypes: [ReportBatchItemFailures]

  WebhookProcessorToGuestLinkQueuePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebhookProcessorToGuestLinkQueuePolicy
      Roles:
        - !Ref WebhookProcessorFnRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sqs:SendMessage
            Resource: !GetAtt GuestLinkQueue.Arn

  GuestBackfillFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/guest/backfill.handler
      Description: Scan reservations and enqueue guest linking jobs
      Environment:
        Variables:
          TABLE_NAME: !Ref HospitableTable
          GUEST_LINK_QUEUE_URL: !Ref GuestLinkQueue
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy:
            TableName: !Ref HospitableTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt GuestLinkQueue.QueueName

  # -----------------------
  # WAF for the webhook
  # -----------------------
  AllowedIpsSet:
    Type: AWS::WAFv2::IPSet
    Properties:
      Name: hospitable-allowed-ips
      Scope: REGIONAL
      IPAddressVersion: IPV4
      Addresses:
        - 38.80.170.0/24

  WebhookWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: hospitable-webhook-acl
      Scope: REGIONAL
      DefaultAction: { Block: {} }
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: hospitableWebhookACL
      Rules:
        - Name: allow-hospitable-ips
          Priority: 1
          Action: { Allow: {} }
          Statement:
            IPSetReferenceStatement:
              Arn: !GetAtt AllowedIpsSet.Arn
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: allowHospitableIPs

  WebhookWebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    DependsOn:
      - WebhookApiv1Stage
    Properties:
      ResourceArn: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${WebhookApi}/stages/v1
      WebACLArn: !GetAtt WebhookWebACL.Arn

  # -----------------------
  # Schedules
  # -----------------------
  NightlyPropertiesSync:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 day)
      State: ENABLED
      Targets:
        - Arn: !GetAtt SyncPropertiesFn.Arn
          Id: NightlyPropertiesTarget

  NightlyPropertiesSyncPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SyncPropertiesFn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt NightlyPropertiesSync.Arn

  WeeklyReservationAudit:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(7 days)
      State: ENABLED
      Targets:
        - Arn: !GetAtt SyncReservationsFn.Arn
          Id: WeeklyAuditTarget
          Input: >-
            {"startDate":"LAST_30_DAYS","endDate":"PLUS_2_YEARS","propertyIds":[]}

  WeeklyReservationAuditPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SyncReservationsFn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WeeklyReservationAudit.Arn

  # -----------------------
  # One-off admin
  # -----------------------
  CleanupUnknownReservationsFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/admin/cleanupUnknownReservations.handler
      Description: One-time cleanup of reservations written with pk=RES#UNKNOWN
      Environment:
        Variables:
          TABLE_NAME: !Ref HospitableTable
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref HospitableTable

Outputs:
  TableName:
    Value: !Ref HospitableTable

  SyncPropertiesFnName:
    Value: !Ref SyncPropertiesFn
  SyncReservationsFnName:
    Value: !Ref SyncReservationsFn
  GuestBackfillFnName:
    Value: !Ref GuestBackfillFn
  GuestLinkerFnName:
    Value: !Ref GuestLinkerFn

  CognitoUserPoolId:
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub "${AWS::StackName}:CognitoUserPoolId"

  CognitoUserPoolClientId:
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}:CognitoUserPoolClientId"
